trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  AWS_REGION: 'us-east-1'
  ECR_URI: '474668397798.dkr.ecr.us-east-1.amazonaws.com/spring-boot-app'
  CLUSTER_NAME: 'eks-dev-cluster'
  TF_IN_AUTOMATION: 'true'

stages:
  - stage: TerraformEKS
    displayName: 'Provision EKS via Terraform'
    jobs:
      - job: Terraform
        displayName: 'Run Terraform'
        steps:
          - checkout: self

          - task: TerraformInstaller@1
            inputs:
              terraformVersion: '1.6.6'

          # Authenticate with AWS to get credentials
          - task: AWSCLI@1
            displayName: 'Verify AWS Access'
            inputs:
              awsCredentials: 'aws-devops-admin'
              awsRegion: '$(AWS_REGION)'
              awsCommand: 'sts'
              awsSubCommand: 'get-caller-identity'

          # Export credentials into pipeline variables
          - script: |
              echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID]$AWS_ACCESS_KEY_ID"
              echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY]$AWS_SECRET_ACCESS_KEY"
            displayName: 'Export AWS Credentials to Env Vars'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

          - script: terraform init
            displayName: 'Terraform Init'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

          - script: terraform plan -out=tfplan
            displayName: 'Terraform Plan'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

          - script: terraform apply -auto-approve tfplan
            displayName: 'Terraform Apply'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - stage: BuildAndPush
    displayName: 'Build and Push Docker Image'
    dependsOn: TerraformEKS
    jobs:
      - job: Build
        displayName: 'Docker Build & Push'
        steps:
          - checkout: self

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests'
            displayName: 'Build Spring Boot App'

          - script: docker build -t $(ECR_URI):latest .
            displayName: 'Build Docker Image'

          - script: |
              aws ecr get-login-password --region $(AWS_REGION) \
              | docker login --username AWS --password-stdin $(ECR_URI)
            displayName: 'Docker Login to ECR'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

          - script: docker push $(ECR_URI):latest
            displayName: 'Push Image to ECR'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - stage: DeployToEKS
    displayName: 'Deploy to EKS'
    dependsOn: BuildAndPush
    jobs:
      - job: Deploy
        displayName: 'Kubernetes Apply'
        steps:
          - checkout: self

          - script: |
              aws eks update-kubeconfig --name $(CLUSTER_NAME) --region $(AWS_REGION)
            displayName: 'Configure kubectl'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

          - script: |
              kubectl apply -f deployment/deployment.yaml
              kubectl apply -f deployment/service.yaml
            displayName: 'Deploy to EKS'
